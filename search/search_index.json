{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py-data-api - Data API Client for Python py-data-api is a client for Data API of Aurora Serverless . Also, the package includes SQLAlchemy Dialects and DB API 2.0 Client. Features SQLAlchemy Dialects DB API 2.0 compatible client PEP 249 Support Database Engines MySQL PostgreSQL What's AWS Aurora Serverless's Data API? https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html This project is an experimental phase. Warning: Some interface will be changed. How to install pydataapi requires Python 3.6.1 or later $ pip install pydataapi Example from typing import List from sqlalchemy import Column , Integer , String from sqlalchemy.ext.declarative import declarative_base from pydataapi import DataAPI , Result class Pets ( declarative_base ()): __tablename__ = 'pets' id = Column ( Integer , primary_key = True , autoincrement = True ) name = Column ( String ( 255 , collation = 'utf8_unicode_ci' ), default = None ) database : str = 'test' resource_arn : str = 'arn:aws:rds:us-east-1:123456789012:cluster:serverless-test-1' secret_arn : str = 'arn:aws:secretsmanager:us-east-1:123456789012:secret:serverless-test1' def example_driver_for_sqlalchemy (): from sqlalchemy.engine import create_engine engine = create_engine ( 'mysql+pydataapi://' , connect_args = { 'resource_arn' : 'arn:aws:rds:us-east-1:123456789012:cluster:dummy' , 'secret_arn' : 'arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy' , 'database' : 'test' } ) result = engine . execute ( \"select * from pets\" ) print ( result . fetchall ()) def example_simple_execute (): data_api = DataAPI ( resource_arn = resource_arn , secret_arn = secret_arn , database = database ) result : Result = data_api . execute ( 'show tables' ) print ( result . scalar ()) # Pets Contributing to pydataapi We are waiting for your contributions to pydataapi . How to contribute https://koxudaxi.github.io/py-data-api/contributing Related projects local-data-api DataAPI Server for local https://github.com/koxudaxi/local-data-api PyPi https://pypi.org/project/pydataapi Source Code https://github.com/koxudaxi/py-data-api Documentation https://koxudaxi.github.io/py-data-api License py-data-api is released under the MIT License. http://www.opensource.org/licenses/mit-license","title":"py-data-api"},{"location":"#py-data-api-data-api-client-for-python","text":"py-data-api is a client for Data API of Aurora Serverless . Also, the package includes SQLAlchemy Dialects and DB API 2.0 Client.","title":"py-data-api - Data API Client for Python"},{"location":"#features","text":"SQLAlchemy Dialects DB API 2.0 compatible client PEP 249","title":"Features"},{"location":"#support-database-engines","text":"MySQL PostgreSQL","title":"Support Database Engines"},{"location":"#whats-aws-aurora-serverlesss-data-api","text":"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html","title":"What's AWS Aurora Serverless's Data API?"},{"location":"#this-project-is-an-experimental-phase","text":"Warning: Some interface will be changed.","title":"This project is an experimental phase."},{"location":"#how-to-install","text":"pydataapi requires Python 3.6.1 or later $ pip install pydataapi","title":"How to install"},{"location":"#example","text":"from typing import List from sqlalchemy import Column , Integer , String from sqlalchemy.ext.declarative import declarative_base from pydataapi import DataAPI , Result class Pets ( declarative_base ()): __tablename__ = 'pets' id = Column ( Integer , primary_key = True , autoincrement = True ) name = Column ( String ( 255 , collation = 'utf8_unicode_ci' ), default = None ) database : str = 'test' resource_arn : str = 'arn:aws:rds:us-east-1:123456789012:cluster:serverless-test-1' secret_arn : str = 'arn:aws:secretsmanager:us-east-1:123456789012:secret:serverless-test1' def example_driver_for_sqlalchemy (): from sqlalchemy.engine import create_engine engine = create_engine ( 'mysql+pydataapi://' , connect_args = { 'resource_arn' : 'arn:aws:rds:us-east-1:123456789012:cluster:dummy' , 'secret_arn' : 'arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy' , 'database' : 'test' } ) result = engine . execute ( \"select * from pets\" ) print ( result . fetchall ()) def example_simple_execute (): data_api = DataAPI ( resource_arn = resource_arn , secret_arn = secret_arn , database = database ) result : Result = data_api . execute ( 'show tables' ) print ( result . scalar ()) # Pets","title":"Example"},{"location":"#contributing-to-pydataapi","text":"We are waiting for your contributions to pydataapi .","title":"Contributing to pydataapi"},{"location":"#how-to-contribute","text":"https://koxudaxi.github.io/py-data-api/contributing","title":"How to contribute"},{"location":"#related-projects","text":"","title":"Related projects"},{"location":"#local-data-api","text":"DataAPI Server for local https://github.com/koxudaxi/local-data-api","title":"local-data-api"},{"location":"#pypi","text":"https://pypi.org/project/pydataapi","title":"PyPi"},{"location":"#source-code","text":"https://github.com/koxudaxi/py-data-api","title":"Source Code"},{"location":"#documentation","text":"https://koxudaxi.github.io/py-data-api","title":"Documentation"},{"location":"#license","text":"py-data-api is released under the MIT License. http://www.opensource.org/licenses/mit-license","title":"License"},{"location":"contributing/","text":"Contributing We are waiting for your contributions to pydataapi . How to contribute ## 1. Clone your fork repository $ git clone git@github.com:<your username>/py-data-api.git $ cd py-data-api ## 2. Create `venv` with python3.7 (also you should do with python3.6) $ python3.7 -m venv venv37 $ source venv37/bin/activate ## 3. Install dependencies $ python3 -m pip install \".[all]\" ## 4. Create new branch and rewrite code. $ git checkout -b new-branch ## 5. Run unittest (you should pass all test and coverage should be 100%) $ ./scripts/unittest.sh $ ./scripts/integration_test.sh ## 6. Format code $ ./scripts/format.sh ## 7. Check lint (mypy) $ ./scripts/lint.sh ## 8. Commit and Push...","title":"Contributing"},{"location":"contributing/#contributing","text":"We are waiting for your contributions to pydataapi .","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"## 1. Clone your fork repository $ git clone git@github.com:<your username>/py-data-api.git $ cd py-data-api ## 2. Create `venv` with python3.7 (also you should do with python3.6) $ python3.7 -m venv venv37 $ source venv37/bin/activate ## 3. Install dependencies $ python3 -m pip install \".[all]\" ## 4. Create new branch and rewrite code. $ git checkout -b new-branch ## 5. Run unittest (you should pass all test and coverage should be 100%) $ ./scripts/unittest.sh $ ./scripts/integration_test.sh ## 6. Format code $ ./scripts/format.sh ## 7. Check lint (mypy) $ ./scripts/lint.sh ## 8. Commit and Push...","title":"How to contribute"}]}